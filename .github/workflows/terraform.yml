name: 'Infrastructure Pipeline'

on:
  push:
    branches: [ ]
    paths:
      - 'terraform/**'
      - 'kubernetes/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ ]
    paths:
      - 'terraform/**'
      - 'kubernetes/**'
      - '.github/workflows/terraform.yml'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_WORKING_DIR: ./terraform

jobs:
  validate:
    name: 'Validate'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"
        terraform_wrapper: false
        
    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ${{ env.TF_WORKING_DIR }}
      
    - name: Terraform Format & Validate
      run: |
        terraform fmt -check
        terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

  plan:
    name: 'Plan'
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Azure OIDC Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform with caching
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"
        terraform_wrapper: false
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=tfplan
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Upload Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: ${{ env.TF_WORKING_DIR }}/tfplan
        retention-days: 1

    - name: Update PR
      if: github.event_name == 'pull_request'
      run: |
        PLAN=$(terraform show -no-color tfplan)
        echo "## Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "$PLAN" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      working-directory: ${{ env.TF_WORKING_DIR }}

  apply:
    name: 'Apply'
    needs: plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: terraform-apply
    
    steps:
    - uses: actions/checkout@v3

    - name: Azure OIDC Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform with caching
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"
        terraform_wrapper: false
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Download Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw kubernetes_cluster_name)
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Check ArgoCD Installation
      id: check-argocd
      run: |
        if ! kubectl get namespace argocd &>/dev/null; then
          echo "Installing ArgoCD..."
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=300s
        else
          echo "ArgoCD namespace exists, checking server deployment..."
          if ! kubectl get deployment argocd-server -n argocd &>/dev/null; then
            echo "Installing ArgoCD components..."
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=300s
          fi
        fi

    - name: Apply ArgoCD Application
      run: |
        kubectl apply -f kubernetes/argocd/application.yaml
        kubectl wait --for=condition=ready applications.argoproj.io/monitoring -n argocd --timeout=300s
